memory: ____ consists of a large array of bytes, each with its own address. 351
counter: the CPU fetches instructions from memory according to the value of the program ____. 351
instruction execution cycle: first an instructino is fetched from memory, then it's decoded and may cause operands to be fetched from memory. After the instruction has been executed on the operands, results may be stored back into memory. This describes what? 351
directly: main memory and the registers built into the processor itself are the only general-purpose storage that the CPU can access ____. 352
stall: completing a memory access may take many cycles of the CPU clock. In such cases, the processor normally needs to ____, since it does not have the data required to complete the instruction that it is executing. 352
cache: It's intolerable to have the processor stall, because of the frequency of memory accesses. The remedy is to add fast memory between the CPU and main memory, typically on the CPU chip for fast access. This is called ____. 352
base: the ____ register holds the smallest legal physical memory address. 352
limit: the ____ register specifies the size of the range of memory addresses. 365
input queue: the processes on the disk that are waiting to be brought into memory for execution form this. 354
binds: addresses in the source program are generally symbolic (such as the variable count). A compiler typically ____ these symbolic addresses to relocatable addresses (such as "14 bytes from the beginning of this module"). 354
compile time: if you know at ____ ____ where the process will reside in memory, then absolute code can be generated. 254
load time: if it's not known at compile time where the process will reside in memory, then the compuler must generate relocatable code. In this case, final binding is delayed until ____ ____. 354
execution time: if the process can be moved during its execution from one memory segment to another, then binding must be delayed until run time. 354
logical address: the address generated by the CPU. 355
physical address: the address seen by the memory unit. 355
identical: the compile-time and load-time address-binding methods generate ____ logical and physical addresses. 355
differing: the execution-time address-binding scheme results in differing logical and physical addresses. 355
virtual: the logical address is usually referred to as the ____ address. 356
logical address space: the set of all logical addresses generated by a program. 356
physical address space: the set of all physical addresses corresponding to these logical addresses. 356
differ: in the execution-time address-binding scheme, the logical and physical address spaces differ. 356
memory management unit: the run-time mapping from virtual to physical addresses is done by this hardware device. 356
relocation register: the base register. The value in this register is added to every address generated by a user process at the time the address is sent to memory. 356
logical: the user program deals with ____ addresses. 356
dynamic loading: with ____ ____, a routine is not loaded until it is called. This obtains better memory-space utilization. 357
dynamically linked libraries: system libraries that are linked to user programs when the programs are run. 357
static linking: system libraries are treated like any other object module and are combined by the loader into the binary program image. 357
stub: with dynamic linking, a ____ is included in the image for each libary routine reference. The ____ is a small piece of code that indicates how to locate the appropriate memory-resident library routine or how to load the library if the routine is not already present. 357
swapped: a process must be in memory to be executed. A process, however, can be ____ temporarily out of memory to a backing store and then brought back into memory for continued execution. 358
swapping: makes it possible for the total physical address space of all processes to exceed the real physical memory of the system, thus increasing the degree of multiprogramming in a system. 358
standard swapping: ____ ____ involves moving processes between main memory and a backing store (which is commonly a fast disk). 358
ready queue: the system maintains a ____ ____ consisting of all processes whose memory images are on the backing store or in memory and are ready to run. 359
swapping: Although most operating systems for PCs and servers support some modified version of swapping, mobile systems typically do not support ____ in any form. 360
flash: mobile devices generally use ____ memory rather than more spacious hard disks as their persisten storage. The resulting space constraint is one reason why mobile operating-system designers avoid swapping. Other reasons include the limited number of writes that flash memory can tolerate before it becomes unreliable and the poor throughput between main memory and flash memory in these devices. 360
application state: Android may terminate a process if insufficient free memory is available. However, before terminating a process, Android writes its ____ ____ to flash memory so that it can be quickly restarted. 360
contiguous: in ____ memory allocation, each process is contained in a single section of memory that is ____ to the section containing the next process. 361
partitions: one of the simplest methods for allocating memory is to divide memory into several fixed-sized ____. Each may contain exactly one process. 362
multiple partition: in the ____ ____ method, when a partition is free, a process is selected from the input queue and is loaded into the free partition. 362
variable partition: in the ____ ____ scheme, the operating system keeps a table indicating which parts of memory are available and which are occupied. 362
hole: Initially, all memory is available for user processes and is considered one large block of available memory, a ____. 362
dynamic storage allocation problem: concerns how to satisfy a request of size n from a list of free holes. 362
first fit: one of the solutions to the dynamic storage allocation problem. allocates the first hole that is big enough. 363
best fit: one of the solutions to the dynamic storage allocation problem. allocates the smallest hole that is big enough. 363
worst fit: one of the solutions to the dynamic storage allocation problem. allocates the largest hole. 363
external fragmentation: as processes are loaded and removed from memory, free memory space is broken into little pieces. ____ ____ exists when there is enough total memory space to satisfy a request but the available spaces are not contiguous; storage is fragmented into a large number of small holes. 363
compaction: one solution to the problem of external fragmentation is ____. The goal is to shuffle the memory contents so as to place all free memory together in one large block. 364
segmentation: a memory-management scheme that supports the programmer view of memory. A logical address is a collection of these, and each have a name and length. 364
paging: segmentation permits the physical address space of a process to be noncontiguous. ____ is another memory-management scheme that offers this advantage. however, it avoids external fragmentation and the need for compaction, whereas segmentation does not. 366
frames: the basic method for implementing paging involves breaking physical memory into fixed-sized blocks called ____ and breaking logical memory into blocks of the same size called pages. 367
pages: the basic method for implementing paging involves breaking physical memory into fixed-sized blocks called frames and breaking logical memory into blocks of the same size called ____. 367
frame table: since the operating system is managing physical memory, it must be aware of the allocationdetails of physical memory--which frames are allocated, which frames are available, how many total frames there are, and so on. this information is generally kept on this data structure. 371
address space identifiers: some TLBs store these in each TLB entry. These uniquely identify each process and is used to provide address space protection for that process. 374
memory management algorithms: contiguous allocation, paging, and segmentation are what kind of algorithms? 389
hardware support: one of the considerations used in comparing different memory-management strategies. a simple base register or a base-limit register pair is sufficient for the single- and multiple-partition schemes, whereas paging and segmentation need mapping tables to define the address map. 389
performance: one of the considerations used in comparing different memory-management strategies. as the memory-management algorithm becomes more complex, the time require to map a logical address to a physical address increases. 389
fragmentation: one of the considerations used in comparing different memory-management strategies. for a given set of processes, we can increase the multiprogramming level only by packing more processes into memory. To accomplish this task, we must reduce memory waste. 389
relocation: one of the considerations used in comparing different memory-management strategies. one solution to the external-fragmentation problem is compaction, which involves shifting a program in memory in such a way that the program does not notice the change. This consideration requires that logical addresses be relocated dynamically, at execution time. 389
swapping: one of the considerations used in comparing different memory-management strategies. can be added to any algorithm. At intervals determined by the operating system, usually dictated by CPU scheduling policies, processes are copied from main memory to a backing store and later are copied back to main memory. this scheme allows more processes to be run than can be fit into memory at one time. 389
sharing: one of the considerations used in comparing different memory-management strategies. generally requires that either paging or segmentation be used to provide small packets of information (pages or segments) that can be shared. it's a means of running many processes with a limited amount of memory, and these kinds of programs and data must be designed carefully. 389
protection: one of the considerations used in comparing different memory-management strategies. if paging or segmentation is provided, different sections of a user program can be declared execute-only, read-only, or read-write. This restriction is necessary with shared code or data and is generally useful in any case to provide simple run-time checks for common programming errors. 389